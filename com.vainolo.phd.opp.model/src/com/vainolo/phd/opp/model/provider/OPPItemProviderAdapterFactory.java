/*******************************************************************************
 * Copyright (c) 2015 Arieh "Vainolo" Bibliowicz and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which is available at http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
/**
 */
package com.vainolo.phd.opp.model.provider;

import com.vainolo.phd.opp.model.util.OPPAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OPPItemProviderAdapterFactory extends OPPAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OPPItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPObjectProcessDiagram} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPObjectProcessDiagramItemProvider oppObjectProcessDiagramItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPObjectProcessDiagram}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPObjectProcessDiagramAdapter() {
    if (oppObjectProcessDiagramItemProvider == null) {
      oppObjectProcessDiagramItemProvider = new OPPObjectProcessDiagramItemProvider(this);
    }

    return oppObjectProcessDiagramItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPStateItemProvider oppStateItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPStateAdapter() {
    if (oppStateItemProvider == null) {
      oppStateItemProvider = new OPPStateItemProvider(this);
    }

    return oppStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPObject} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPObjectItemProvider oppObjectItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPObject}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPObjectAdapter() {
    if (oppObjectItemProvider == null) {
      oppObjectItemProvider = new OPPObjectItemProvider(this);
    }

    return oppObjectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPProcess} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPProcessItemProvider oppProcessItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPProcess}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPProcessAdapter() {
    if (oppProcessItemProvider == null) {
      oppProcessItemProvider = new OPPProcessItemProvider(this);
    }

    return oppProcessItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPStructuralLinkAggregator} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPStructuralLinkAggregatorItemProvider oppStructuralLinkAggregatorItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPStructuralLinkAggregator}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPStructuralLinkAggregatorAdapter() {
    if (oppStructuralLinkAggregatorItemProvider == null) {
      oppStructuralLinkAggregatorItemProvider = new OPPStructuralLinkAggregatorItemProvider(this);
    }

    return oppStructuralLinkAggregatorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPLabel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPLabelItemProvider oppLabelItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPLabel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPLabelAdapter() {
    if (oppLabelItemProvider == null) {
      oppLabelItemProvider = new OPPLabelItemProvider(this);
    }

    return oppLabelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPLink} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPLinkItemProvider oppLinkItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPLink}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPLinkAdapter() {
    if (oppLinkItemProvider == null) {
      oppLinkItemProvider = new OPPLinkItemProvider(this);
    }

    return oppLinkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPProceduralLink} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPProceduralLinkItemProvider oppProceduralLinkItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPProceduralLink}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPProceduralLinkAdapter() {
    if (oppProceduralLinkItemProvider == null) {
      oppProceduralLinkItemProvider = new OPPProceduralLinkItemProvider(this);
    }

    return oppProceduralLinkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPStructuralLinkPart} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPStructuralLinkPartItemProvider oppStructuralLinkPartItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPStructuralLinkPart}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPStructuralLinkPartAdapter() {
    if (oppStructuralLinkPartItemProvider == null) {
      oppStructuralLinkPartItemProvider = new OPPStructuralLinkPartItemProvider(this);
    }

    return oppStructuralLinkPartItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link com.vainolo.phd.opp.model.OPPPoint} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OPPPointItemProvider oppPointItemProvider;

  /**
   * This creates an adapter for a {@link com.vainolo.phd.opp.model.OPPPoint}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOPPPointAdapter() {
    if (oppPointItemProvider == null) {
      oppPointItemProvider = new OPPPointItemProvider(this);
    }

    return oppPointItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (oppObjectProcessDiagramItemProvider != null) oppObjectProcessDiagramItemProvider.dispose();
    if (oppStateItemProvider != null) oppStateItemProvider.dispose();
    if (oppObjectItemProvider != null) oppObjectItemProvider.dispose();
    if (oppProcessItemProvider != null) oppProcessItemProvider.dispose();
    if (oppStructuralLinkAggregatorItemProvider != null) oppStructuralLinkAggregatorItemProvider.dispose();
    if (oppLabelItemProvider != null) oppLabelItemProvider.dispose();
    if (oppLinkItemProvider != null) oppLinkItemProvider.dispose();
    if (oppProceduralLinkItemProvider != null) oppProceduralLinkItemProvider.dispose();
    if (oppStructuralLinkPartItemProvider != null) oppStructuralLinkPartItemProvider.dispose();
    if (oppPointItemProvider != null) oppPointItemProvider.dispose();
  }

}
